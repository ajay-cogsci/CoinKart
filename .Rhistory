library(quantmod)
getSymbols('BTC-INR')
getSymbols('BTC-INR', src='google')
getSymbols('BTC-INR', src='yahoo')
httr::GET("http://cran.r-project.org/Rlogo.jpg")
Response [http://cran.r-project.org/Rlogo.jpg]
Date: 2018-05-14 19:57
Status: 200
Content-Type: image/jpeg
Size: 16 kB
<BINARY BODY>
httr::GET("http://cran.r-project.org/Rlogo.jpg", config = httr::config(connecttimeout = 60))
getSymbols('AAPL', src='yahoo')
getSymbols('BTC-INR', src='yahoo')
day <-14
price <- Cl('BTC-INR')
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(BTC-INR))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(BTC-INR)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(BTC-INR)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
`BTC-INR`
`BTC-INR`[,4]
`BTC-INR`[1,4]
day <-14
price <-  Cl('BTC-INR'[,4])
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(BTC-INR))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(BTC-INR)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(BTC-INR)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
price <-  'BTC-INR'[,4]
price <-  c('BTC-INR'[,4])
'BTC-INR'[,4]
day <-14
price <-  Cl(`BTC-INR`[,4])
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR``)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
price <-  `BTC-INR`[,4]
price
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR``)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
#TRADE 1 - SIMPLE BUY-SELL FILTER
price <- Cl(MSFT)
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(MSFT))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(MSFT))
trade1 <- Lag(signal)
ret1<-dailyReturn(MSFT)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
#TRADE 1 - SIMPLE BUY-SELL FILTER
price <-  `BTC-INR`[,4]
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(MSFT))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(MSFT))
trade1 <- Lag(signal)
ret1<-dailyReturn(MSFT)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
#TRADE 2 - RSI
day <-14
price <-  `BTC-INR`[,4]
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
#TRADE 1 - SIMPLE BUY-SELL FILTER
price <-  `BTC-INR`[,4]
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(`BTC-INR`))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade1 <- Lag(signal)
ret1<-dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
#TRADE 2 - RSI
day <-14
price <-  `BTC-INR`[,4]
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
library("PerformanceAnalytics")
#TRADE 1 - SIMPLE BUY-SELL FILTER
price <-  `BTC-INR`[,4]
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(`BTC-INR`))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade1 <- Lag(signal)
ret1<-dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
#TRADE 2 - RSI
day <-14
price <-  `BTC-INR`[,4]
signal <- c()                    #initialize vector
rsi <- RSI(price, day)     #rsi is the lag of RSI
signal [1:day+1] <- 0            #0 because no signal until day+1
for (i in (day+1): length(price)){
if (rsi[i] < 30){             #buy if rsi < 30
signal[i] <- 1
}else {                       #no trade all if rsi > 30
signal[i] <- 0
}
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade2 <- Lag(signal)
#construct a new variable ret1
ret1 <- dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
# construct a new variable ret2
ret2 <- dailyReturn(`BTC-INR`)*trade2
names(ret2) <- 'RSI'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. RSI")
library("quantmod")
library("PerformanceAnalytics")
plot.macd = TRUE
ndrawdowns = 3
short.pos = 0 # size of short position. Set to 0 to disallow shorting
sym = "BTC-INR" # symbol to be tested -- can be changed
all.data = getSymbols(sym,auto.assign=FALSE)
data=all.data[,6] # column 6 to use distribution-adjusted closing prices
macd = MACD(data, nFast=12, nSlow=26,nSig=9,maType=SMA,percent = FALSE)
if (plot.macd) {
chartSeries(all.data, TA=NULL)
chartSeries(data, TA="addMACD()")
}
signal = Lag(ifelse(macd$macd < macd$signal, short.pos, 1))
returns = ROC(data)*signal
portfolio = exp(cumsum(returns))
table.Drawdowns(returns, top=ndrawdowns)
table.DownsideRisk(returns)
charts.PerformanceSummary(returns)
price <-  `BTC-INR`[,4]
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(`BTC-INR`))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(`BTC-INR`))
trade1 <- Lag(signal)
ret1<-dailyReturn(`BTC-INR`)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
retall <- cbind(ret1, returns)
charts.PerformanceSummary(retall,
main="Naive v.s. MACD")
getSymbols("ETH-INR")
price <- Cl(`ETH-INR`)
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(`ETH-INR`))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(`ETH-INR`))
trade1 <- Lag(signal)
ret1<-dailyReturn(`ETH-INR`)*trade1
names(ret1) <- 'Naive'
adx = ADX(`ETH-INR`[,2:4])
signal <- Lag(ifelse(adx$DIp < adx$DIn, -1, 1))
ret2<-dailyReturn(`ETH-INR`)*signal
names(ret2) <- 'ADX'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. ADX for ETH-INR")
charts.PerformanceSummary(ret1)
getSymbols("ETH-INR")
price <- Cl(`ETH-INR`)
r <- price/Lag(price) - 1
delta<-0.005
signal <-c(NA) # first signal is NA
for (i in 2: length(Cl(`ETH-INR`))){
if (r[i] > delta){
signal[i]<- 1
} else if (r[i]< -delta){
signal[i]<- -1
} else
signal[i]<- 0
}
signal<-reclass(signal,Cl(`ETH-INR`))
trade1 <- Lag(signal)
ret1<-dailyReturn(`ETH-INR`)*trade1
names(ret1) <- 'Naive'
charts.PerformanceSummary(ret1)
adx = ADX(`ETH-INR`[,2:4])
signal <- Lag(ifelse(adx$DIp < adx$DIn, -1, 1))
ret2<-dailyReturn(`ETH-INR`)*signal
names(ret2) <- 'ADX'
retall <- cbind(ret1, ret2)
charts.PerformanceSummary(retall,
main="Naive v.s. ADX for ETH-INR")
shiny::runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
runApp('ShinyApp1/secondtry/attempt2')
shiny::runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
setwd("D:/RCoinKart-display/MoreNuanced")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
rm(list=ls())
runApp()
shiny::runApp('MoreNuanced')
shiny::runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
runApp('MoreNuanced')
